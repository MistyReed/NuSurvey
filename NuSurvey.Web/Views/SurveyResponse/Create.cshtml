@model NuSurvey.Web.Controllers.SurveyResponseViewModel
           


@{
    ViewBag.Title = "Answers";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
	@Html.ValidationSummary("Correct Errors before submitting")
    @Html.HiddenFor(x => x.Survey.Id)

<fieldset>
@* Legend is required if you have more than one widget/unit to help the user understand what is being asked of them.
Example: Dinosaur 1  *@
	@*<legend>Survey Response</legend>*@
	<h4>Answer All Survey Questions</h4>
	@*<p>Be specific so the user understands what exactly you are looking for.  Example: After Dinosaur 1 moves out of his/her parents' den what will Dinosaur 1 do?  We need to know his employment plan, feeding area, as well as living situation.  This information will not be sold or given to carnivores.</p>*@
	<p>All required fields are in <strong>bold</strong> and have a red <span class="required">*</span> next to the field label.</p>
	<ul>
		<li>
			<div class="editor-label required">
				@*<label>ID: <span>*</span></label>*@
                @Html.LabelFor(a => a.SurveyResponse.StudentId)<span>*</span> 
			</div>
			<div class="editor-field">
				@Html.EditorFor(model => model.SurveyResponse.StudentId)
				@Html.ValidationMessageFor(model => model.SurveyResponse.StudentId)
			</div>
		</li>

        @{ var odd = false; }
        @{ var indexCounter = 0;}
        @{ var ans = string.Empty;}
        @foreach (var item in Model.Questions)
        {
            <li class="@(odd ? "odd" : "even")">
                <div class="editor-label required">
                    <label>@item.Order. @item.Name <span>*</span></label>
                </div>
                <div class="editor-field ">
                    <input id="Questions[@indexCounter]_QuestionId" type="hidden" value="@item.Id" name="Questions[@indexCounter].QuestionId" />
                    @if (item.IsOpenEnded)
                    {
                        if (Model.SurveyAnswers != null && Model.SurveyAnswers.ElementAtOrDefault(indexCounter) != null && Model.SurveyAnswers.ElementAtOrDefault(indexCounter).Answer != null)
                        {
                            ans = Model.SurveyAnswers.ElementAtOrDefault(indexCounter).Answer;
                        }
                        else {
                            ans = string.Empty;
                        }              
                        <input id="Questions[@indexCounter]" class="text-box single-line" type="text" value="@ans" name="Questions[@indexCounter].Answer"/>                   
                    }
                    else
                    {
                        foreach (var response in item.Responses.OrderBy(x => x.Order))
                        {
                            var isChecked = string.Empty;
                            if (Model.SurveyAnswers != null && Model.SurveyAnswers.ElementAtOrDefault(indexCounter) != null){
                                if (response.Id == Model.SurveyAnswers.ElementAtOrDefault(indexCounter).ResponseId){
                                    isChecked = "checked=\"checked\""; 
                                }
                            }
                            <input id="Questions[@indexCounter][@response.Order]" type="radio" value="@response.Id" @isChecked name="Questions[@indexCounter].ResponseId" />                             
                            <label for="Questions[@indexCounter][@response.Order]">@response.Value</label> <br />
                        }
                    }
                    @Html.ValidationMessage("Questions[" + @indexCounter + "]")
                </div>
            </li>
                    odd = !odd;
                    indexCounter = indexCounter + 1;
        }

		<li>
			@* For the clear and submit buttons an empty label is required. Example: <label>&nbsp;</label> *@
			<label>&nbsp;</label>
			<input class="button" type="submit" value="Submit" /> | @Html.ActionLink("Cancel", "Index")
		</li>
	</ul>
</fieldset>
}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>

