@model NuSurvey.Web.Controllers.SurveyResponseViewModel

@{
    ViewBag.Title = "Answers";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm()) {
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)
    @Html.HiddenFor(x => x.Survey.Id)
<fieldset>
@* Legend is required if you have more than one widget/unit to help the user understand what is being asked of them.
Example: Dinosaur 1  *@
	@*<legend>Survey Response</legend>*@
	<h4>Answer All Survey Questions</h4>
	@*<p>Be specific so the user understands what exactly you are looking for.  Example: After Dinosaur 1 moves out of his/her parents' den what will Dinosaur 1 do?  We need to know his employment plan, feeding area, as well as living situation.  This information will not be sold or given to carnivores.</p>*@
	<p>All required fields are in <strong>bold</strong> and have a red <span class="required">*</span> next to the field label.</p>
	<ul>
		<li>
			<div class="editor-label required">
				<label>ID: <span>*</span></label>
			</div>
			<div class="editor-field">
				@Html.EditorFor(model => model.SurveyResponse.StudentId)
				@Html.ValidationMessageFor(model => model.SurveyResponse.StudentId)
			</div>
		</li>

        @{ var odd = false; }
        @foreach (var item in Model.Questions){
            <li class="@(odd ? "odd": "even")">
                <div class="editor-label required">
                    <label>@item.Order. @item.Name <span>*</span></label>
                </div>
                <div class="editor-field">
                    <input id="Questions[@item.Order]_QuestionId" type="hidden" value="@item.Id" name="Questions[@item.Order].QuestionId" />
                    @if (item.IsOpenEnded){ 
                        <input id="Questions[@item.Order]" class="text-box single-line" type="text" value="" name="Questions[@item.Order].Answer"/>   
                    }
                    else { 
                        foreach (var response in item.Responses.OrderBy(x => x.Order)) { 
                            <input id="Questions[@item.Order][@response.Order]" type="radio" value="@response.Value" name="Questions[@item.Order].Answer" /> 
                            <label for="Questions[@item.Order][@response.Order]">@response.Value</label> <br />
                        }
                    }
                </div>
            </li>
            odd = !odd;    
        }

		<li>
			@* For the clear and submit buttons an empty label is required. Example: <label>&nbsp;</label> *@
			<label>&nbsp;</label>
			<input class="button" type="submit" value="Submit" /> | @Html.ActionLink("Cancel", "Index")
		</li>
	</ul>
</fieldset>
}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>

